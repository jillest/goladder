#[test]
fn big_test() {
    let costs = vec![
        vec![
            0, 33638, 36033, 21642, 67796, 6970, 62886, 88403, 67630, 47379, 94910, 89837, 95622,
            54524, 82295, 1589, 87925, 52002, 21942, 56648, 6208, 85058, 62028, 77641, 35481,
            87484, 60472, 79993, 35387, 29168,
        ],
        vec![
            33638, 0, 8187, 27451, 55520, 88357, 41478, 33678, 3223, 41959, 87755, 14654, 22556,
            87450, 64096, 76115, 85009, 73471, 12899, 75000, 13026, 65841, 2767, 13629, 84137,
            86201, 86658, 33052, 52922, 32361,
        ],
        vec![
            36033, 8187, 0, 3995, 22388, 17294, 23957, 17570, 62628, 15451, 95221, 48250, 7541,
            71913, 57874, 67029, 5211, 70209, 68288, 22488, 36110, 38632, 15835, 37283, 62028,
            17959, 77785, 66089, 72939, 65941,
        ],
        vec![
            21642, 27451, 3995, 0, 37095, 99433, 41975, 85311, 94777, 30747, 79830, 55171, 46577,
            97549, 18597, 92515, 13628, 16980, 77746, 9466, 92047, 26905, 29246, 23859, 97847,
            64681, 18774, 47166, 4963, 55672,
        ],
        vec![
            67796, 55520, 22388, 37095, 0, 36256, 79831, 9657, 14257, 36018, 27481, 29845, 92652,
            25439, 85934, 23944, 23662, 88458, 25416, 69105, 95836, 17660, 57062, 78436, 14008,
            24650, 89301, 97395, 28829, 79322,
        ],
        vec![
            6970, 88357, 17294, 99433, 36256, 0, 65463, 73223, 73459, 5187, 31082, 9816, 21387,
            44657, 57442, 9157, 47983, 65243, 34792, 14595, 4398, 55973, 43421, 95329, 41553,
            31124, 94595, 78645, 51164, 93902,
        ],
        vec![
            62886, 41478, 23957, 41975, 79831, 65463, 0, 53816, 26434, 53225, 72282, 54142, 22193,
            50652, 86981, 91308, 72849, 6207, 41913, 61050, 87676, 98263, 70695, 60836, 23989,
            5719, 52599, 51629, 14629, 31623,
        ],
        vec![
            88403, 33678, 17570, 85311, 9657, 73223, 53816, 0, 57504, 28833, 26956, 76469, 68709,
            92903, 59010, 67724, 68360, 1018, 6245, 93305, 89449, 42298, 24792, 83648, 48431,
            88395, 88547, 33446, 27547, 1530,
        ],
        vec![
            67630, 3223, 62628, 94777, 14257, 73459, 26434, 57504, 0, 24445, 33602, 25930, 52531,
            53317, 53036, 96853, 76459, 91400, 17570, 38534, 68280, 24353, 91451, 41902, 78764,
            92021, 90836, 6913, 49942, 18774,
        ],
        vec![
            47379, 41959, 15451, 30747, 36018, 5187, 53225, 28833, 24445, 0, 3798, 19636, 77000,
            22432, 91312, 82204, 90402, 72124, 50945, 46127, 80918, 61680, 66636, 2051, 93081,
            66984, 90344, 84004, 12723, 82468,
        ],
        vec![
            94910, 87755, 95221, 79830, 27481, 31082, 72282, 26956, 33602, 3798, 0, 72083, 2596,
            62382, 46089, 81148, 90039, 88465, 526, 75646, 49723, 13310, 96816, 39840, 17643,
            86198, 22207, 31396, 21209, 24823,
        ],
        vec![
            89837, 14654, 48250, 55171, 29845, 9816, 54142, 76469, 25930, 19636, 72083, 0, 43612,
            9420, 79063, 16682, 5806, 70637, 67068, 53459, 30137, 194, 67287, 62706, 9946, 77335,
            70353, 24911, 19158, 10023,
        ],
        vec![
            95622, 22556, 7541, 46577, 92652, 21387, 22193, 68709, 52531, 77000, 2596, 43612, 0,
            34752, 14076, 29063, 51959, 92984, 10379, 66765, 74028, 34970, 99600, 42035, 8001,
            5656, 28467, 47927, 84125, 75174,
        ],
        vec![
            54524, 87450, 71913, 97549, 25439, 44657, 50652, 92903, 53317, 22432, 62382, 9420,
            34752, 0, 84233, 71737, 63478, 86514, 17199, 6158, 55105, 72269, 33985, 69801, 72887,
            13271, 45559, 52287, 14004, 31792,
        ],
        vec![
            82295, 64096, 57874, 18597, 85934, 57442, 86981, 59010, 53036, 91312, 46089, 79063,
            14076, 84233, 0, 71429, 29281, 99989, 69759, 76676, 37363, 83444, 71611, 1983, 69883,
            99532, 20206, 42775, 58385, 44940,
        ],
        vec![
            1589, 76115, 67029, 92515, 23944, 9157, 91308, 67724, 96853, 82204, 81148, 16682,
            29063, 71737, 71429, 0, 55242, 24629, 98504, 84036, 70285, 79136, 70235, 4114, 78766,
            51808, 12703, 47497, 80280, 81388,
        ],
        vec![
            87925, 85009, 5211, 13628, 23662, 47983, 72849, 68360, 76459, 90402, 90039, 5806,
            51959, 63478, 29281, 55242, 0, 67550, 38797, 36584, 65664, 87431, 83762, 16895, 77790,
            9701, 83110, 62456, 4702, 87219,
        ],
        vec![
            52002, 73471, 70209, 16980, 88458, 65243, 6207, 1018, 91400, 72124, 88465, 70637,
            92984, 86514, 99989, 24629, 67550, 0, 60825, 42828, 3126, 83433, 66632, 49758, 75267,
            18684, 61134, 32170, 94091, 48616,
        ],
        vec![
            21942, 12899, 68288, 77746, 25416, 34792, 41913, 6245, 17570, 50945, 526, 67068, 10379,
            17199, 69759, 98504, 38797, 60825, 0, 30780, 72758, 44422, 70957, 72449, 41191, 1823,
            65691, 50410, 59736, 89153,
        ],
        vec![
            56648, 75000, 22488, 9466, 69105, 14595, 61050, 93305, 38534, 46127, 75646, 53459,
            66765, 6158, 76676, 84036, 36584, 42828, 30780, 0, 40517, 24790, 35953, 18105, 16297,
            35537, 49550, 20834, 39451, 81763,
        ],
        vec![
            6208, 13026, 36110, 92047, 95836, 4398, 87676, 89449, 68280, 80918, 49723, 30137,
            74028, 55105, 37363, 70285, 65664, 3126, 72758, 40517, 0, 99749, 92349, 30889, 22444,
            84704, 11420, 69988, 35133, 68637,
        ],
        vec![
            85058, 65841, 38632, 26905, 17660, 55973, 98263, 42298, 24353, 61680, 13310, 194,
            34970, 72269, 83444, 79136, 87431, 83433, 44422, 24790, 99749, 0, 3414, 14270, 83172,
            83965, 41665, 25079, 44609, 87918,
        ],
        vec![
            62028, 2767, 15835, 29246, 57062, 43421, 70695, 24792, 91451, 66636, 96816, 67287,
            99600, 33985, 71611, 70235, 83762, 66632, 70957, 35953, 92349, 3414, 0, 26489, 47902,
            27794, 76890, 69026, 16253, 68521,
        ],
        vec![
            77641, 13629, 37283, 23859, 78436, 95329, 60836, 83648, 41902, 2051, 39840, 62706,
            42035, 69801, 1983, 4114, 16895, 49758, 72449, 18105, 30889, 14270, 26489, 0, 89607,
            69680, 52893, 34074, 86669, 35958,
        ],
        vec![
            35481, 84137, 62028, 97847, 14008, 41553, 23989, 48431, 78764, 93081, 17643, 9946,
            8001, 72887, 69883, 78766, 77790, 75267, 41191, 16297, 22444, 83172, 47902, 89607, 0,
            42845, 39547, 3758, 58417, 5949,
        ],
        vec![
            87484, 86201, 17959, 64681, 24650, 31124, 5719, 88395, 92021, 66984, 86198, 77335,
            5656, 13271, 99532, 51808, 9701, 18684, 1823, 35537, 84704, 83965, 27794, 69680, 42845,
            0, 1712, 66441, 34498, 34959,
        ],
        vec![
            60472, 86658, 77785, 18774, 89301, 94595, 52599, 88547, 90836, 90344, 22207, 70353,
            28467, 45559, 20206, 12703, 83110, 61134, 65691, 49550, 11420, 41665, 76890, 52893,
            39547, 1712, 0, 97406, 7961, 97322,
        ],
        vec![
            79993, 33052, 66089, 47166, 97395, 78645, 51629, 33446, 6913, 84004, 31396, 24911,
            47927, 52287, 42775, 47497, 62456, 32170, 50410, 20834, 69988, 25079, 69026, 34074,
            3758, 66441, 97406, 0, 93565, 47705,
        ],
        vec![
            35387, 52922, 72939, 4963, 28829, 51164, 14629, 27547, 49942, 12723, 21209, 19158,
            84125, 14004, 58385, 80280, 4702, 94091, 59736, 39451, 35133, 44609, 16253, 86669,
            58417, 34498, 7961, 93565, 0, 43403,
        ],
        vec![
            29168, 32361, 65941, 55672, 79322, 93902, 31623, 1530, 18774, 82468, 24823, 10023,
            75174, 31792, 44940, 81388, 87219, 48616, 89153, 81763, 68637, 87918, 68521, 35958,
            5949, 34959, 97322, 47705, 43403, 0,
        ],
    ];
    let mate = weightedmatch::weightedmatch(costs.clone(), weightedmatch::MINIMIZE);
    assert_eq!(
        &mate[1..],
        &[
            16, 23, 4, 3, 9, 21, 18, 30, 5, 11, 10, 22, 19, 20, 24, 1, 29, 7, 13, 14, 6, 12, 2, 15,
            28, 27, 26, 25, 17, 8
        ]
    );
    let mate = weightedmatch::weightedmatch(costs, weightedmatch::MAXIMIZE);
    assert_eq!(
        &mate[1..],
        &[
            12, 14, 11, 25, 21, 24, 22, 20, 26, 17, 3, 1, 23, 2, 18, 19, 10, 15, 16, 8, 5, 7, 13,
            6, 4, 9, 30, 29, 28, 27
        ]
    );
}
